" vim: foldmethod=marker

" general {{{
set encoding=utf-8
let mapleader = " "
autocmd vimenter * ++nested colorscheme catppuccin-macchiato
set background=dark
set noerrorbells visualbell t_vb=
set number relativenumber
set wildignore=*.swp,*.bak,*.pyc,*.class,*.cache,*.dll,*.DS_Store,*.rdb,*.db,*.sqlite
set wildignore+=__pycache__/*,venv/*,env/*,.git/*,build/*,node_modules/*,dist/*
set backspace=indent,eol,start
set cursorline
set showmatch
set title
set ruler
" configure whitespace characters, toggle with :set list/:set list!
set listchars=tab:→\ ,space:·,nbsp:␣,trail:•,eol:¶,precedes:«,extends:»
" change cursor shape in insert/normal
let &t_SI = "\e[6 q"
let &t_EI = "\e[2 q"
set ttimeout
set ttimeoutlen=100

" code
syntax on
filetype plugin indent on
set expandtab softtabstop=4 shiftwidth=4 tabstop=4
set autoindent
set smartindent
" }}}

" search {{{
set incsearch
" center search results, jumps etc.
nnoremap n nzz
nnoremap N Nzz
nnoremap <C-o> <C-o>zz
nnoremap <C-i> <C-i>zz
nnoremap <C-]> <C-]>zz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz
" search for visually selected text
" adapted from https://vim.fandom.com/wiki/Search_for_visually_selected_text
vnoremap * y/\V<C-R>=escape(@",'/\')<CR><CR>zz
vnoremap # y?\V<C-R>=escape(@",'/\')<CR><CR>zz
" }}}

" buffers {{{
set hidden
" }}}

" windows {{{
" split below and right by default
set splitbelow splitright
" }}}

" plugins {{{
call plug#begin()
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'itchyny/lightline.vim'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-fugitive'
Plug 'tpope/vim-unimpaired'
Plug 'unblevable/quick-scope'
" needs +lua
Plug 'catppuccin/nvim', { 'as': 'catppuccin' }
Plug 'neoclide/coc.nvim', {'branch': 'release'}
call plug#end()

" }}}

" fzf {{{
nnoremap <leader>f :Files<cr>
nnoremap <leader>g :Rg<cr>
nnoremap <leader>b :Buffers<cr>

" do not match filenames when using ripgrep
" --delimiter --nth 4.. (4th and beyond) should be the content
command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>),
  \   1,
  \   fzf#vim#with_preview({'options': '--delimiter : --nth 4..'}),
  \   <bang>0
  \ )

" }}}

" coc {{{
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gr <Plug>(coc-references)
nmap <silent> <F2> <Plug>(coc-diagnostic-prev)
nmap <silent> <S-F2> <Plug>(coc-diagnostic-next)
nmap <Leader>ca <Plug>(coc-codeaction-cursor)
" }}}

" lightline {{{
set laststatus=2
let g:lightline = {
    \ 'active': {
    \   'left': [ [ 'mode', 'paste' ],
    \             [ 'gitbranch', 'readonly', 'filename', 'modified' ] ]
    \ },
    \ 'component_function': {
    \   'gitbranch': 'FugitiveHead'
    \ },
    \ }
" }}}

" quick-scope {{{
" Trigger a highlight in the appropriate direction when pressing these keys:
let g:qs_highlight_on_keys = ['f', 'F', 't', 'T']
" }}}
